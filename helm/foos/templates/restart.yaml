{{- $fullName := include "foos.fullname" . -}}
# Service account the client will use to reset the deployment,
# by default the pods running inside the cluster can do no such things.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ $fullName }}-deployment-restart
---
# allow getting status and patching only the one deployment you want
# to restart
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $fullName }}-deployment-restart
rules:
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments"]
    resourceNames: 
    - {{ $fullName | quote }}
    verbs: ["get", "patch", "list", "watch"] # "list" and "watch" are only needed
                                             # if you want to use `rollout status`
---
# bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $fullName }}-deployment-restart
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $fullName }}-deployment-restart
subjects:
  - kind: ServiceAccount
    name: {{ $fullName }}-deployment-restart
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $fullName }}-deployment-restart
spec:
  concurrencyPolicy: Forbid
  schedule: '0 */8 * * *'
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        spec:
          serviceAccountName: {{ $fullName }}-deployment-restart
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              command:
                - 'kubectl'
                - 'rollout'
                - 'restart'
                - "deployment/{{ $fullName }}"